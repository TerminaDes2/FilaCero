generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model roles {
  id_rol     BigInt     @id @default(autoincrement()) @map("id_rol")
  nombre_rol String     @unique @map("nombre_rol") @db.VarChar(50)
  usuarios   usuarios[]

  @@map("roles")
}

model usuarios {
  id_usuario             BigInt                   @id @default(autoincrement()) @map("id_usuario")
  id_rol                 BigInt?                  @map("id_rol")
  nombre                 String                   @map("nombre") @db.VarChar(150)
  correo_electronico     String                   @unique @map("correo_electronico") @db.VarChar(254)
  password_hash          String                   @map("password_hash") @db.VarChar(255)
  numero_telefono        String?                  @map("numero_telefono") @db.VarChar(30)
  numero_cuenta          String?                  @unique @map("numero_cuenta") @db.VarChar(30)
  fecha_nacimiento       DateTime?                @map("fecha_nacimiento") @db.Date
  fecha_registro         DateTime?                @map("fecha_registro") @db.Timestamptz(6)
  estado                 String?                  @map("estado") @db.VarChar(20)
  edad                   Int?                     @db.SmallInt
  verificado             Boolean                  @default(false)
  fecha_verificacion     DateTime?
  verification_token     String?                  @unique @db.VarChar(128)
  verification_token_expires DateTime?
  credential_url         String?                  @db.VarChar(512)
  avatar_url             String?                  @db.VarChar(512)
  comentario             comentario[]
  corte_caja             corte_caja[]
  feedback               feedback[]
  movimientos_inventario movimientos_inventario[]
  negocio_ratings        negocio_rating[]
  role                   roles?                   @relation(fields: [id_rol], references: [id_rol], onDelete: NoAction, onUpdate: NoAction)
  venta                  venta[]
  usuarios_negocio       usuarios_negocio[]

  @@map("usuarios")
}

model categoria {
  id_categoria BigInt     @id @default(autoincrement())
  nombre       String     @db.VarChar(120)
  negocio_id   BigInt?
  producto     producto[]
  negocio      negocio?   @relation(fields: [negocio_id], references: [id_negocio], onDelete: SetNull, onUpdate: NoAction)

  @@index([negocio_id])
  @@unique([negocio_id, nombre])
}

model comentario {
  id_comentario BigInt     @id @default(autoincrement())
  id_usuario    BigInt?
  comentario    String?
  fecha         DateTime?  @db.Timestamptz(6)
  usuarios      usuarios?  @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  feedback      feedback[]
}

model corte_caja {
  id_corte       BigInt    @id @default(autoincrement())
  id_negocio     BigInt?
  id_usuario     BigInt?
  fecha_inicio   DateTime? @db.Timestamptz(6)
  fecha_fin      DateTime? @db.Timestamptz(6)
  monto_inicial  Decimal?  @db.Decimal(14, 2)
  monto_final    Decimal?  @db.Decimal(14, 2)
  ventas_totales Int?
  negocio        negocio?  @relation(fields: [id_negocio], references: [id_negocio], onDelete: NoAction, onUpdate: NoAction)
  usuarios       usuarios? @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model detalle_venta {
  id_detalle             BigInt                   @id @default(autoincrement())
  id_venta               BigInt?
  id_producto            BigInt?
  cantidad               Int?
  precio_unitario        Decimal?                 @db.Decimal(12, 2)
  producto               producto?                @relation(fields: [id_producto], references: [id_producto], onDelete: NoAction, onUpdate: NoAction)
  venta                  venta?                   @relation(fields: [id_venta], references: [id_venta], onDelete: NoAction, onUpdate: NoAction)
  movimientos_inventario movimientos_inventario[] @relation("DetalleMovimientos")
}

model feedback {
  id_feedback   BigInt      @id @default(autoincrement())
  id_usuario    BigInt?
  id_comentario BigInt?
  calificacion  Int?        @db.SmallInt
  fecha         DateTime?   @db.Timestamptz(6)
  comentario    comentario? @relation(fields: [id_comentario], references: [id_comentario], onDelete: NoAction, onUpdate: NoAction)
  usuarios      usuarios?   @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model inventario {
  id_inventario       BigInt    @id @default(autoincrement())
  id_negocio          BigInt?
  id_producto         BigInt?
  stock_minimo        Int?
  cantidad_actual     Int?
  fecha_actualizacion DateTime? @db.Timestamptz(6)
  negocio             negocio?  @relation(fields: [id_negocio], references: [id_negocio], onDelete: NoAction, onUpdate: NoAction)
  producto            producto? @relation(fields: [id_producto], references: [id_producto], onDelete: NoAction, onUpdate: NoAction)
}

model movimientos_inventario {
  id_movimiento BigInt         @id @default(autoincrement())
  id_negocio    BigInt
  id_producto   BigInt
  delta         Int
  motivo        String         @db.VarChar(50)
  id_venta      BigInt?
  id_detalle    BigInt?
  id_usuario    BigInt?
  fecha         DateTime       @default(now()) @db.Timestamptz(6)
  negocio       negocio        @relation(fields: [id_negocio], references: [id_negocio], onDelete: NoAction, onUpdate: NoAction)
  producto      producto       @relation(fields: [id_producto], references: [id_producto], onDelete: NoAction, onUpdate: NoAction)
  venta         venta?         @relation("VentaMovimientos", fields: [id_venta], references: [id_venta], onDelete: SetNull, onUpdate: NoAction)
  detalle       detalle_venta? @relation("DetalleMovimientos", fields: [id_detalle], references: [id_detalle], onDelete: SetNull, onUpdate: NoAction)
  usuario       usuarios?      @relation(fields: [id_usuario], references: [id_usuario], onDelete: SetNull, onUpdate: NoAction)

  @@map("movimientos_inventario")
}

model negocio {
  id_negocio             BigInt                   @id @default(autoincrement())
  nombre                 String                   @db.VarChar(200)
  direccion              String?
  telefono               String?                  @db.VarChar(30)
  correo                 String?                  @db.VarChar(254)
  logo_url               String?
  hero_image_url         String?
  fecha_registro         DateTime?                @db.Timestamptz(6)
  corte_caja             corte_caja[]
  inventario             inventario[]
  categorias             categoria[]
  movimientos_inventario movimientos_inventario[]
  reporte_ventas         reporte_ventas[]
  venta                  venta[]
  usuarios_negocio       usuarios_negocio[]
  ratings                negocio_rating[]
  metricas               producto_metricas_semanales[]
}

model producto {
  id_producto            BigInt                   @id @default(autoincrement())
  id_categoria           BigInt?
  nombre                 String                   @db.VarChar(200)
  descripcion            String?
  descripcion_larga      String?
  codigo_barras          String?                  @unique @db.VarChar(100)
  precio                 Decimal                  @db.Decimal(12, 2)
  imagen_url             String?
  estado                 String?                  @db.VarChar(30)
  detalle_venta          detalle_venta[]
  inventario             inventario[]
  movimientos_inventario movimientos_inventario[]
  categoria              categoria?               @relation(fields: [id_categoria], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction)
  media                  producto_media[]
  metricas               producto_metricas_semanales[]
}

model reporte_ventas {
  id_reporte          BigInt    @id @default(autoincrement())
  id_negocio          BigInt?
  fecha               DateTime? @db.Date
  total_ventas        Decimal?  @db.Decimal(14, 2)
  total_productos     Int?
  total_efectivo      Decimal?  @db.Decimal(14, 2)
  total_tarjeta       Decimal?  @db.Decimal(14, 2)
  total_transferencia Decimal?  @db.Decimal(14, 2)
  negocio             negocio?  @relation(fields: [id_negocio], references: [id_negocio], onDelete: NoAction, onUpdate: NoAction)
}

model tipo_pago {
  id_tipo_pago BigInt  @id @default(autoincrement())
  tipo         String  @unique @db.VarChar(50)
  descripcion  String?
  venta        venta[]
}

model venta {
  id_venta               BigInt                   @id @default(autoincrement())
  id_negocio             BigInt?
  id_usuario             BigInt?
  fecha_venta            DateTime?                @db.Timestamptz(6)
  total                  Decimal?                 @db.Decimal(14, 2)
  id_tipo_pago           BigInt?
  estado                 String?                  @db.VarChar(30)
  detalle_venta          detalle_venta[]
  movimientos_inventario movimientos_inventario[] @relation("VentaMovimientos")
  negocio                negocio?                 @relation(fields: [id_negocio], references: [id_negocio], onDelete: NoAction, onUpdate: NoAction)
  tipo_pago              tipo_pago?               @relation(fields: [id_tipo_pago], references: [id_tipo_pago], onDelete: NoAction, onUpdate: NoAction)
  usuarios               usuarios?                @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

/// Relaci√≥n muchos-a-muchos entre usuarios y negocio con rol por negocio
model usuarios_negocio {
  id_asignacion    BigInt    @id @default(autoincrement()) @map("id_asignacion")
  id_usuario       BigInt    @map("id_usuario")
  id_negocio       BigInt    @map("id_negocio")
  rol              String    @db.VarChar(30) // 'owner' | 'admin' | 'staff'
  fecha_asignacion DateTime? @db.Timestamptz(6)

  usuario usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)
  negocio negocio  @relation(fields: [id_negocio], references: [id_negocio], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_usuario, id_negocio])
  @@map("usuarios_negocio")
}

model negocio_rating {
  id_rating   BigInt    @id @default(autoincrement())
  id_negocio  BigInt
  id_usuario  BigInt
  estrellas   Int       @db.SmallInt
  comentario  String?
  creado_en   DateTime  @default(now()) @db.Timestamptz(6)

  negocio negocio @relation(fields: [id_negocio], references: [id_negocio], onDelete: Cascade, onUpdate: NoAction)
  usuario usuarios @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_negocio, id_usuario])
}

model producto_media {
  id_media    BigInt   @id @default(autoincrement())
  id_producto BigInt
  url         String   @db.VarChar(2048)
  principal   Boolean  @default(false)
  tipo        String?  @db.VarChar(30)
  creado_en   DateTime @default(now()) @db.Timestamptz(6)

  producto producto @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade, onUpdate: NoAction)
}

model producto_metricas_semanales {
  id_metricas BigInt   @id @default(autoincrement())
  id_producto BigInt
  id_negocio  BigInt?
  anio        Int
  semana      Int
  cantidad    Int
  calculado_en DateTime @default(now()) @db.Timestamptz(6)

  producto producto @relation(fields: [id_producto], references: [id_producto], onDelete: Cascade, onUpdate: NoAction)
  negocio  negocio? @relation(fields: [id_negocio], references: [id_negocio], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id_producto, id_negocio, anio, semana])
}
